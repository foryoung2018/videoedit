// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from voicebeating.djinni

package com.dc.platform.voicebeating;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class VoiceBeat {
    public abstract HashMap<Integer, ArrayList<VoiceTrackInfo>> getVoiceTrackInfo(VoiceInputInfo inputinfo);

    public abstract void generateBeatingVoice();

    public abstract VoiceAnalysisInfo generateVoiceAnalysisInfo(VoiceAssetInfo assetInfo);

    public abstract byte[] getAudioData(int sampleCount);

    public abstract int getAudioDuration();

    public abstract int audioSeek(int seekPos);

    public abstract boolean stopThread();

    public abstract void destory();

    public abstract void setCallback(NotifyCallback outputCallback);

    public static VoiceBeat createVoiceBeat()
    {
        return CppProxy.createVoiceBeat();
    }

    private static final class CppProxy extends VoiceBeat
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void destory() {
            _djinni_private_destroy();
        }

        @Override
        public HashMap<Integer, ArrayList<VoiceTrackInfo>> getVoiceTrackInfo(VoiceInputInfo inputinfo)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getVoiceTrackInfo(this.nativeRef, inputinfo);
        }
        private native HashMap<Integer, ArrayList<VoiceTrackInfo>> native_getVoiceTrackInfo(long _nativeRef, VoiceInputInfo inputinfo);

        @Override
        public void generateBeatingVoice()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_generateBeatingVoice(this.nativeRef);
        }
        private native void native_generateBeatingVoice(long _nativeRef);

        @Override
        public VoiceAnalysisInfo generateVoiceAnalysisInfo(VoiceAssetInfo assetInfo)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_generateVoiceAnalysisInfo(this.nativeRef, assetInfo);
        }
        private native VoiceAnalysisInfo native_generateVoiceAnalysisInfo(long _nativeRef, VoiceAssetInfo assetInfo);

        @Override
        public byte[] getAudioData(int sampleCount)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAudioData(this.nativeRef, sampleCount);
        }
        private native byte[] native_getAudioData(long _nativeRef, int sampleCount);

        @Override
        public int getAudioDuration()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAudioDuration(this.nativeRef);
        }
        private native int native_getAudioDuration(long _nativeRef);

        @Override
        public int audioSeek(int seekPos)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_audioSeek(this.nativeRef, seekPos);
        }
        private native int native_audioSeek(long _nativeRef, int seekPos);

        @Override
        public boolean stopThread()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_stopThread(this.nativeRef);
        }
        private native boolean native_stopThread(long _nativeRef);

        @Override
        public void setCallback(NotifyCallback outputCallback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCallback(this.nativeRef, outputCallback);
        }
        private native void native_setCallback(long _nativeRef, NotifyCallback outputCallback);

        public static native VoiceBeat createVoiceBeat();
    }
}
