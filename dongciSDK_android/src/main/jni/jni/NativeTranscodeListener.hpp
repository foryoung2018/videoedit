// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ffmpeg.djinni

#pragma once

#include "djinni_support.hpp"
#include "transcode_listener.hpp"

namespace djinni_generated {

class NativeTranscodeListener final : ::djinni::JniInterface<::dc::platform::TranscodeListener, NativeTranscodeListener> {
public:
    using CppType = std::shared_ptr<::dc::platform::TranscodeListener>;
    using CppOptType = std::shared_ptr<::dc::platform::TranscodeListener>;
    using JniType = jobject;

    using Boxed = NativeTranscodeListener;

    ~NativeTranscodeListener();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeTranscodeListener>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeTranscodeListener>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeTranscodeListener();
    friend ::djinni::JniClass<NativeTranscodeListener>;
    friend ::djinni::JniInterface<::dc::platform::TranscodeListener, NativeTranscodeListener>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::dc::platform::TranscodeListener
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void OnProcess(float percent) override;

    private:
        friend ::djinni::JniInterface<::dc::platform::TranscodeListener, ::djinni_generated::NativeTranscodeListener>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/dongci/sun/gpuimglibrary/libffmpeg/TranscodeListener") };
    const jmethodID method_onProcess { ::djinni::jniGetMethodID(clazz.get(), "onProcess", "(F)V") };
};

}  // namespace djinni_generated

//extern "C" void call_C_f(void * p, float seconds);
