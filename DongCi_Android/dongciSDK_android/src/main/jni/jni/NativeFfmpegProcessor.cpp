// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ffmpeg.djinni

#include "NativeFfmpegProcessor.hpp"  // my header
#include "Marshal.hpp"
#include "NativeFfmpegProcessor.hpp"
#include "NativeFfmpegWatermark.hpp"
#include "NativeTranscodeListener.hpp"

namespace djinni_generated {

NativeFfmpegProcessor::NativeFfmpegProcessor() : ::djinni::JniInterface<::dc::platform::FfmpegProcessor, NativeFfmpegProcessor>("com/dongci/sun/gpuimglibrary/libffmpeg/FfmpegProcessor$CppProxy") {}

NativeFfmpegProcessor::~NativeFfmpegProcessor() = default;


CJNIEXPORT void JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<djinni::CppProxyHandle<::dc::platform::FfmpegProcessor>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1getImageFromVideo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jfloat j_time, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->GetImageFromVideo(::djinni::String::toCpp(jniEnv, j_video),
                                        ::djinni::F32::toCpp(jniEnv, j_time),
                                        ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1generateVideoWithImage(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_image, jint j_duration, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->GenerateVideoWithImage(::djinni::String::toCpp(jniEnv, j_image),
                                             ::djinni::I32::toCpp(jniEnv, j_duration),
                                             ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1addWatermarks(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jobject j_watermarks, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->AddWatermarks(::djinni::String::toCpp(jniEnv, j_video),
                                    ::djinni::List<::djinni_generated::NativeFfmpegWatermark>::toCpp(jniEnv, j_watermarks),
                                    ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1generateLoopAudio(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_audio, jint j_loopCount, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->GenerateLoopAudio(::djinni::String::toCpp(jniEnv, j_audio),
                                        ::djinni::I32::toCpp(jniEnv, j_loopCount),
                                        ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1generateLoopAudioWithDuration(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_audio, jint j_loopCount, jint j_durationMs, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->GenerateLoopAudioWithDuration(::djinni::String::toCpp(jniEnv, j_audio),
                                                    ::djinni::I32::toCpp(jniEnv, j_loopCount),
                                                    ::djinni::I32::toCpp(jniEnv, j_durationMs),
                                                    ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1extractAudioFromVideo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jint j_vol, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->ExtractAudioFromVideo(::djinni::String::toCpp(jniEnv, j_video),
                                            ::djinni::I32::toCpp(jniEnv, j_vol),
                                            ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1mixAudio(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_audio0, jstring j_audio1, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->MixAudio(::djinni::String::toCpp(jniEnv, j_audio0),
                               ::djinni::String::toCpp(jniEnv, j_audio1),
                               ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1generateFadeOutAudio(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_audio, jfloat j_fadeOutTime, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->GenerateFadeOutAudio(::djinni::String::toCpp(jniEnv, j_audio),
                                           ::djinni::F32::toCpp(jniEnv, j_fadeOutTime),
                                           ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1muxVideoAndAudio(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jstring j_audio, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->MuxVideoAndAudio(::djinni::String::toCpp(jniEnv, j_video),
                                       ::djinni::String::toCpp(jniEnv, j_audio),
                                       ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1moveMoovFlgToBeginning(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->MoveMoovFlgToBeginning(::djinni::String::toCpp(jniEnv, j_video),
                                             ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1getTs(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->GetTs(::djinni::String::toCpp(jniEnv, j_video),
                            ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1concatVideos(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_videos, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->ConcatVideos(::djinni::List<::djinni::String>::toCpp(jniEnv, j_videos),
                                   ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1concatVideosWithDirectory(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_directory, jobject j_videos, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->ConcatVideosWithDirectory(::djinni::String::toCpp(jniEnv, j_directory),
                                                ::djinni::List<::djinni::String>::toCpp(jniEnv, j_videos),
                                                ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1generateBlurVideo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jint j_blur, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->GenerateBlurVideo(::djinni::String::toCpp(jniEnv, j_video),
                                        ::djinni::I32::toCpp(jniEnv, j_blur),
                                        ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1trimVideo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jfloat j_fromTime, jfloat j_duration, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->TrimVideo(::djinni::String::toCpp(jniEnv, j_video),
                                ::djinni::F32::toCpp(jniEnv, j_fromTime),
                                ::djinni::F32::toCpp(jniEnv, j_duration),
                                ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1makeAudioSilent(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->MakeAudioSilent(::djinni::String::toCpp(jniEnv, j_video),
                                      ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1trimVideoWithWatermark(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jfloat j_fromTime, jfloat j_duration, jobject j_watermark, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->TrimVideoWithWatermark(::djinni::String::toCpp(jniEnv, j_video),
                                             ::djinni::F32::toCpp(jniEnv, j_fromTime),
                                             ::djinni::F32::toCpp(jniEnv, j_duration),
                                             ::djinni_generated::NativeFfmpegWatermark::toCpp(jniEnv, j_watermark),
                                             ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1timeScale(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jfloat j_timeScale, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->TimeScale(::djinni::String::toCpp(jniEnv, j_video),
                                ::djinni::F32::toCpp(jniEnv, j_timeScale),
                                ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1videoCopy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->VideoCopy(::djinni::String::toCpp(jniEnv, j_video),
                                ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1execute(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_cmd)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->Execute(::djinni::String::toCpp(jniEnv, j_cmd));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1cropVideo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jint j_x, jint j_y, jint j_width, jint j_height, jstring j_output)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
        auto r = ref->CropVideo(::djinni::String::toCpp(jniEnv, j_video),
                                ::djinni::I32::toCpp(jniEnv, j_x),
                                ::djinni::I32::toCpp(jniEnv, j_y),
                                ::djinni::I32::toCpp(jniEnv, j_width),
                                ::djinni::I32::toCpp(jniEnv, j_height),
                                ::djinni::String::toCpp(jniEnv, j_output));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

    CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1transcodeVideo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jint j_width, jint j_height, jint j_fps, jint j_bitrate, jstring j_output)
    {
        try {
            DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
            const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
            auto r = ref->TranscodeVideo(::djinni::String::toCpp(jniEnv, j_video),
                                    ::djinni::I32::toCpp(jniEnv, j_width),
                                    ::djinni::I32::toCpp(jniEnv, j_height),
                                    ::djinni::I32::toCpp(jniEnv, j_fps),
                                    ::djinni::I32::toCpp(jniEnv, j_bitrate),
                                    ::djinni::String::toCpp(jniEnv, j_output));
            return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
        } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
    }

    CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1transcodeAudio(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jint j_samplerate, jint j_channels, jint j_bitrate, jstring j_output)
    {
        try {
            DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
            const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
            auto r = ref->TranscodeAudio(::djinni::String::toCpp(jniEnv, j_video),
                                         ::djinni::I32::toCpp(jniEnv, j_samplerate),
                                         ::djinni::I32::toCpp(jniEnv, j_channels),
                                         ::djinni::I32::toCpp(jniEnv, j_bitrate),
                                         ::djinni::String::toCpp(jniEnv, j_output));
            return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
        } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
    }

    CJNIEXPORT jboolean JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1rotateVideo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_video, jstring j_output)
    {
        try {
            DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
            const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
            auto r = ref->RotateVideo(::djinni::String::toCpp(jniEnv, j_video),
                                         ::djinni::String::toCpp(jniEnv, j_output));
            return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
        } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
    }


    CJNIEXPORT void JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_00024CppProxy_native_1setTranscodeListener(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_listener)
    {
        try {
            DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
            const auto& ref = ::djinni::objectFromHandleAddress<::dc::platform::FfmpegProcessor>(nativeRef);
            ref->SetTranscodeListener(::djinni_generated::NativeTranscodeListener::toCpp(jniEnv, j_listener));
        } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
    }



CJNIEXPORT jobject JNICALL Java_com_dongci_sun_gpuimglibrary_libffmpeg_FfmpegProcessor_createFfmpegProcessor(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::dc::platform::FfmpegProcessor::CreateFfmpegProcessor();
        return ::djinni::release(::djinni_generated::NativeFfmpegProcessor::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}


}  // namespace djinni_generated
